# -*- coding: utf-8 -*-
"""Копия блокнота "homework_04.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZxNc_JnAVUfKpIjBeqfDlNQgVurRZ5vg

# Домашнее задание: декораторы

## Импорт библиотек, установка констант
"""

import requests
import time
import re
import functools

from random import randint

BOOK_PATH = 'https://www.gutenberg.org/files/2638/2638-0.txt'

"""## Задание 1"""

def benchmark(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        start = time.perf_counter()
        result = func(*args, **kwargs)
        end = time.perf_counter()
        print(f'Время выполнения функции {func.__name__}: {end - start:.12f}')
        return result
    return wrapper

"""## Задание 2"""

def logging(func):
    """
    Декоратор, который выводит параметры с которыми была вызвана функция
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        print('Функция вызвана с параметрами:')
        print(args, kwargs)
        return result
    return wrapper

"""## Задание 3"""

def counter(func):
    """
    Декоратор, считающий и выводящий количество вызовов декорируемой функции
    """

    @wraps(func)
    def wrapper(*args, **kwargs):
        wrapper.count += 1
        result = func(*args, **kwargs)
        print(f'Функция была вызвана: {wrapper.count} раз')
        return result
    wrapper.count = 0
    return wrapper

"""## Задание 4"""

def memo(func):
  """
  Декоратор, запоминающий результаты исполнения функции func, чьи аргументы args должны быть хешируемыми
  """
  cache = {}
  @wraps(func)
  def fmemo(*args):
    if args[0] in cache:
        return cache[args[0]]
    else:
        result = func(*args)
        cache[args[0]] = result
        return result
  fmemo.cache = cache
  return fmemo

"""## Тестирование"""

@counter
@logging
@benchmark
def word_count(word, url=BOOK_PATH):
    """
    Функция для посчета указанного слова на html-странице
    """

    # отправляем запрос в библиотеку Gutenberg и забираем текст
    raw = requests.get(url).text

    # заменяем в тексте все небуквенные символы на пробелы
    processed_book = re.sub('[\W]+' , ' ', raw).lower()

    # считаем
    cnt = len(re.findall(word.lower(), processed_book))

    return f"Cлово {word} встречается {cnt} раз"

print(word_count('the'))

def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
start_time = time.time()
res = fib(30)
finish_time = time.time()
print(round((finish_time - start_time), 10))

@memo
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
start_time = time.time()
res = fib(30)
finish_time = time.time()
print(round((finish_time - start_time), 10))

@functools.lru_cache()
@benchmark
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

start_time = time.time()
res = fib(30)
finish_time = time.time()
print(round((finish_time - start_time), 10))